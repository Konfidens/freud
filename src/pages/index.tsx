import React, { type FormEvent } from "react";
import Head from "next/head";
import { api } from "~/utils/api";
import { Role, type Message } from "~/interfaces/message";
import SourceComponent from "~/components/sourceComponent";
import { LogoWordmark } from "~/components/logo/LogoWordmark";
import { colors } from "~/stitches/colors";

export default function Home() {
  const [query, setQuery] = React.useState("");
  const [messages, setMessages] = React.useState<Message[]>([]);
  const [isLoadingReply, setIsLoadingReply] = React.useState(false);

  const mutation = api.langchain.conversation.useMutation({
    onError: (error) => {
      console.error(error);
      setIsLoadingReply(false);
    },
    onSuccess: (message) => {
      setMessages([...messages, message!]);
      setIsLoadingReply(false);
    },
  });

  const vectorStoreMutation = api.vectorstore.create.useMutation({
    onError: (error) => console.error(error),
    onSuccess: () => console.info("Vector store created"),
  });

  function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();
    setIsLoadingReply(true);
    const message = {
      role: Role.User,
      content: query,
    };
    setMessages([...messages, message]);
    mutation.mutate([...messages, message]);
  }

  function createVectorStore() {
    vectorStoreMutation.mutate("dummy text");
  }

  return (
    <>
      <Head>
        <title>Freud</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-beige100">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-green750 sm:text-[5rem]">
            Freud
          </h1>
          <LogoWordmark color={colors.green750} />
          <button className="bg-white" onClick={createVectorStore}>
            Generer vektor-database
          </button>
          <div>
            {messages.map((message, idx) => {
              return message.role === Role.User ? (
                <p className="text-white pt-5" key={idx}>
                  {message.content}
                </p>
              ) : (
                <div key={idx}>
                  <p
                    className="text-red-500 pt-2"
                    key={"reply-" + idx.toString()}
                  >
                    {message.content}
                  </p>

                  {message.sources == undefined ||
                  message.sources?.length == 0 ? (
                    <p className="bold text-yellow-300 pt-2 font-bold">
                      Fant ingen kilder til dette spørsmålet
                    </p>
                  ) : (
                    <p className="bold text-green-900 pt-2 font-bold">Kilder</p>
                  )}

                  <ul
                    className="text-green-900 list-disc"
                    key={"source-list-" + idx.toString()}
                  >
                    {message.sources ? (
                      message.sources.map((source, listId) => {
                        return (
                          <li
                            key={
                              "source-list-" +
                              idx.toString() +
                              "-element-" +
                              listId.toString()
                            }
                          >
                            {source.title} av {source.author}, s.{" "}
                            {source.location.pageNr} (linje{" "}
                            {source.location.lineFrom}-{source.location.lineTo})
                            <br />
                            <SourceComponent
                              text={source.content}
                            ></SourceComponent>
                          </li>
                        );
                      })
                    ) : (
                      <li>No sources available</li>
                    )}
                  </ul>
                </div>
              );
            })}
          </div>
        </div>
        <form
          onSubmit={handleSubmit}
          className="mb-2 block"
          aria-disabled={isLoadingReply}
        >
          <input
            className="block w-full p-4"
            disabled={isLoadingReply}
            type="text"
            id="querySearch"
            value={query}
            onChange={(event) => {
              setQuery(event.target.value);
            }}
          />
        </form>
      </main>
    </>
  );
}
