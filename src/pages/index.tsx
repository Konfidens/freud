import Head from "next/head";
import React, { useEffect, useState } from "react";
import Chat from "~/components/Chat";
import Header from "~/components/Header";
import SelectCategories from "~/components/SelectCategories";
import { SidebarFreud } from "~/components/SidebarFreud";
import { VectorStoreSettings } from "~/components/VectorStoreSettings";
import { Button } from "~/components/ui/button/Button";
import { env } from "~/env.mjs";
import { type Message } from "~/interfaces/message";
import type { Categories } from "~/types/categories";
import { api } from "~/utils/api";

export default function Home() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [showSettings, setShowSettings] = useState<boolean>(false);
  const [categories, setCategories] = useState<Categories>({});
  const [diagnosisMode, setDiagnosisMode] = useState<boolean>(false);

  const fetchedCategories = api.weaviate.listSchemas.useMutation({
    onSuccess: (data) => {
      if (!data) {
        throw new Error("Data not defined in OnSuccess");
      }

      // If category selections exists in localStorage, update checked value accordingly
      const localCategorySelections: Categories = JSON.parse(
        localStorage.getItem("categories") ?? "{}"
      ) as Categories;

      // Iterate through classes fetched via API
      data.classes?.map((item) => {
        if (item.class === undefined) {
          return;
        }

        const className = item.class;
        const localStorageSelectionExists = Object.keys(
          localCategorySelections
        ).includes(className);

        // Set to value in localStorage, alternatively default to false (not checked)
        setCategories((categories) => ({
          ...categories,
          [className]: localStorageSelectionExists
            ? localCategorySelections[className] ?? false
            : false,
        }));
      });
    },
  });

  useEffect(() => {
    fetchedCategories.mutate();
  }, []);

  return (
    <>
      <Head>
        <title>Freud</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/sigmund_freud_avatar.png" />
      </Head>
      <main
        className={`flex min-h-screen flex-col items-center justify-between bg-beige100 pb-8`}
      >
        <SidebarFreud
          showSettings={showSettings}
          setShowSettings={setShowSettings}
        >
          <>
            <SelectCategories
              categories={categories}
              setCategories={setCategories}
            />
            <Button
              color={diagnosisMode ? "green" : "white"}
              onClick={() => setDiagnosisMode(!diagnosisMode)}
              className="ml-4"
            >
              Diagnosis mode
            </Button>
            {env.NEXT_PUBLIC_NODE_ENV == "development" && (
              <VectorStoreSettings vectorStoreSchemas={fetchedCategories} />
            )}
          </>
        </SidebarFreud>
        {/* get content in center at start */}
        <div />
        <div />
        <Header chatStarted={messages.length > 0} />
        <Chat
          messages={messages}
          setMessages={setMessages}
          categories={categories}
          diagnosisMode={diagnosisMode}
        />
      </main>
    </>
  );
}
