import Head from "next/head";
import React, { type FormEvent, useState, useRef, useEffect } from "react";
import { SidebarFreud } from "~/SidebarFreud";
import { VectorStoreComponent } from "~/components/VectorStoreComponent";
import { Button } from "~/components/button/Button";
import { colors } from "~/stitches/colors";
import { Icon } from "~/components/icon/Icon";
import { api } from "~/utils/api";
import { Role, type Message } from "~/interfaces/message";
import SourceComponent from "~/components/sourceComponent";
import { LogoWordmark } from "~/components/logo/LogoWordmark";
import { InputField } from "~/components/inputField/InputField";

import Image from "next/image";
import FeedbackComponent from "~/components/feedbackComponent";
import { env } from "~/env.mjs";

import QuickAskComponent from "~/components/quickAskComponent";
import { TextArea } from "~/components/textArea/TextArea";
import useAutosizeTextArea from "~/components/useAutosizeTextArea";

const AVATAR_IMAGE_SIZE = 50;

export default function Home() {
  const [query, setQuery] = useState("");
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoadingReply, setIsLoadingReply] = useState<boolean>(false);
  const [showSettings, setShowSettings] = useState<boolean>(false);

  const [suggestedQuestions, setSuggestedQuestions] = React.useState<string[]>([
    "How can I help my patient with anxiety?",
    "How do I assess trauma in a patient?",
    "What do I do if my patient is very silent?",
  ]);

  // const getAll = api.feedback.getAllData.useQuery()
  // console.log(getAll.data);

  const mutation = api.langchain.conversation.useMutation({
    onError: (error) => {
      console.error(error);
      setIsLoadingReply(false);
    },
    onSuccess: (message) => {
      setMessages([...messages, message!.reply]);
      setQuery("");
      setIsLoadingReply(false);

      setSuggestedQuestions(message!.generated_followup_questions);
    },
  });
  // const feedbacks = api.feedback.getAllData.useQuery();

  const queryResult = api.feedback.createNewFeedback.useMutation({
    // temporary test
    onError: (error: any) => console.error(error),
    onSuccess: () => console.info("Data sent!"),
  });

  function handleQuickSubmit(n: number) {

    const question = suggestedQuestions[n];
    if (!question) {
      throw new Error("Index of clicked question is out of bounds")
    }
    setQuery(question);

    setIsLoadingReply(true);
    const message = {
      role: Role.User,
      content: question,
    };
    setMessages([...messages, message]);
    mutation.mutate([...messages, message]);
  }

  function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();

    //Quickfix for empty query
    if (query.length == 0) {
      return;
    }

    setIsLoadingReply(true);
    const message = {
      role: Role.User,
      content: query,
    };
    setMessages([...messages, message]);
    mutation.mutate([...messages, message]);
  }


  // autosize textarea
  const textAreaRef = useRef<HTMLTextAreaElement>(null);
  useAutosizeTextArea(textAreaRef.current, query);


  //auto scrolldown
  const bottomRef = useRef<null | HTMLDivElement>(null);

  useEffect(() => {
    if (bottomRef.current) {
      bottomRef.current.scrollIntoView({
        behavior: "smooth",
        block: "end",
      });
    }
  }, [messages]);




  return (
    <>
      <Head>
        <title>Freud</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/sigmund_freud_avatar.png" />
      </Head>
      <main className={`flex min-h-screen flex-col items-center bg-beige100 px-8 pb-8 justify-between`}>
        {env.NEXT_PUBLIC_NODE_ENV == "development" && (
          <SidebarFreud
            showSettings={showSettings}
            setShowSettings={setShowSettings}
          >
            <VectorStoreComponent />
          </SidebarFreud>
        )}
        {/* get content in center at start */}
        <div></div>
        <div></div>
        <div className="container flex flex-col items-center gap-12 px-4 py-16 mx-8">
          <div className="flex flex-row items-end gap-1">
            <h1 className="text-5xl font-extrabold tracking-tight text-green750 sm:text-[5rem]">
              Freud
            </h1>
            <p className="pb-[0.3rem] text-green750">by</p>
            <div className="h-6 w-16">
              <LogoWordmark color={colors.green750} />
            </div>
          </div>

          <h3 className={`text-xl text-center text-gray700 transition-[opacity,transform] duration-[0.5s] overflow-hidden ${messages.length > 0 ? "opacity-0 scale-y-0" : "opacity-100 scale-y-1"}`}>Freud er en chatbot som kan henvise til fagstoff innenfor psykologi. Still den et egendefinert spørsmål eller prøv forslagene nederst og få et svar som er koblet til kildehenvisningene.
            Freud er fremdeles i en testing-fase og vil ikke alltid gi faktuelle eller gode svar.
            Foreløpig er den kun tilpasset å kunne gi svar på engelsk.
            Trykk på mail-ikonet for å gi en tilbakemelding på hva som kan forbedres.</h3>
        </div>


        <div className={`text-2xl w-full transition-all duration-1000 min-h-[1rem] ${messages.length > 0 ? "grow" : ""} flex flex-col items-center`}>
          {messages.map((message, idx) => {
            return (
              <div
                key={idx.toString()}
                className="container border-b-2 border-gray900 py-10"
              >
                {message.role === Role.User ? (
                  <div key={idx} className="flex items-start space-x-4">
                    <Image
                      className="mt-3"
                      src="/chatter_avatar_2.png"
                      alt="This is text"
                      width={AVATAR_IMAGE_SIZE}
                      height={AVATAR_IMAGE_SIZE}
                    />
                    <p className="pt-5" key={idx}>
                      {message.content}
                    </p>
                  </div>
                ) : (
                  <div key={idx}>
                    <div className="relative">
                      <Image
                        className="float-left mr-4"
                        src="/sigmund_freud_avatar.png"
                        alt="This is text"
                        width={AVATAR_IMAGE_SIZE}
                        height={AVATAR_IMAGE_SIZE}
                      />
                      <FeedbackComponent chat={messages} />
                      <p
                        color={colors.beige400}
                        className=""
                        key={"reply-" + idx.toString()}
                      >
                        {message.content}
                      </p>
                    </div>

                    <div className="mb-3">
                      {message.sources == undefined ||
                        message.sources?.length == 0 ? (
                        <p className="bold py-2 font-bold text-yellow550">
                          Fant ingen kilder til dette spørsmålet
                        </p>
                      ) : (
                        <div>
                          <p className="bold py-2 font-bold">Kilder</p>

                          <ul>
                            {message.sources.map((source, sourceIdx) => {
                              return (
                                <SourceComponent
                                  key={sourceIdx}
                                  source={source}
                                ></SourceComponent>
                              );
                            })}
                          </ul>
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </div>
            );
          })}
        </div>


        <div className="w-[100%] flex flex-col items-center align-center">
          <QuickAskComponent
            suggestedQuestions={suggestedQuestions}
            onClick={handleQuickSubmit}
            isLoadingReply={isLoadingReply}
          />
          <form onSubmit={handleSubmit} className="mb-0 flex flex-row gap-3 w-[50%] mt-8">
            <TextArea
              disabled={isLoadingReply}
              value={query}
              ref={textAreaRef}
              rows={1}
              onChange={(event) => {
                setQuery(event.target.value);
              }}
              style={{
                resize: "none",
                transition: "border-color 150ms ease",
                padding: "1rem"
              }}
              placeholder="What is your question for Freud?"

              id={"submitquestion"}
            />
            <Button
              type="submit"
              color={"lightGreen"}
              withBorder={true}
              disabled={isLoadingReply}
              className="h-10 self-center"
            >
              <Icon name={"arrowNarrowRight"} color={colors.green600}></Icon>
            </Button>
          </form>
          <div ref={bottomRef} />
        </div>
      </main>
    </>
  );
}
